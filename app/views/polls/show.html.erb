
<p>
  <strong>Active:</strong>
  <%= @poll.active %>
</p>

<p>
  <strong>Name:</strong>
  <%= @poll.name %>
</p>

<p>
  <strong>Pub date:</strong>
  <%= @poll.pub_date %>
</p>

<p>
  <strong>Description:</strong>
  <%= @poll.description %>
</p>

<p><strong>Questions:</strong></p>
<% @poll.poll_questions.each do |pq| %>
  <div>
    <% if pq.question_type != "text" %>
      <div id="chart-<%= pq.id %>">question <%= pq.id %> placeholder</div>
    <% end %>
  </div>
<% end %>

<%= link_to 'Edit', edit_poll_path(@poll) %> |
<%= link_to 'Back', polls_path %>

<script src="https://code.highcharts.com/highcharts.src.js"></script>
<script>
  var pollId = <%= @poll.id %>;
  $(function () {


    var poll = $.ajax({
      method: "GET",
      url: "/polls/" + pollId + ".json"
    }).then(
      function (data) {
        makeCharts(data.poll);
      },
      function (reason) {
        console.warn(reason);
      }
    );


    function makeCharts(poll) {
      poll.poll_questions.forEach(function (pq) {
        if (pq.question_type !== "text") {
          Highcharts.chart("chart-" + pq.id, {
            chart: {
              type: 'column'
            },
            title: {
              text: pq.text
            },
            xAxis: {
              type: 'category',
              labels: {
                style: {
                  fontSize: '13px',
                  fontFamily: 'Verdana, sans-serif'
                }
              }
            },
            yAxis: {
              min: 0,
              title: {
                text: 'Number of votes'
              }
            },
            legend: {
              enabled: false
            },
            tooltip: {
              pointFormat: 'Number of votes : {point.y:f}'
            },
            series: [{
              colorByPoint: true,
              data: getSeries(pq.question_type, pq.answers)
            }]
          });
        }
      });
    }

    function getCategories (pqType) {
      if (pqType === "range") {
        return [0, 1, 2, 3, 4, 5, 6, 7 ,8, 9, 10];
      }
      return null;
    }

    function getSeries(pqType, answers) {
      switch (pqType) {
        case "int":
          return getIntSeries(answers);
          break;
        case "range":
          return getIntSeries(answers);
        default:
          return [];
      }
    }

    function getIntSeries(answers) {
      series = [];
      answers.forEach(function (a) {
        var exist = false;
        series.forEach(function(s) {
          if(s[0] == a.int_value) {
            exist = true;
            s[1]++;
          }
        });
        if (!exist) {
          series.push([
            a.int_value,
            1
          ]);
        }
      });
      return series.sort(function(a, b) {
        return a[0] > b[0];
      });
    }
  });
</script>
